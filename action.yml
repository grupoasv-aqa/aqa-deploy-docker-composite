name: 'Docker deployment'
description: 'Docker deployment via SSH'
inputs:
  ssh-host:
    description: 'SSH host'
    required: true
  ssh-user:
    description: 'SSH user'
    required: true
  ssh-private-key:
    description: 'SSH private key'
    required: true
  image-version:
    description: 'Docker image version to deploy'
    required: true
  environment:
    description: 'Application environment'
    required: true
  origin-path:
    description: 'Path for origin files'
    required: true
  destination-path:
    description: 'Path to copy files'
    required: true
  deploy-script:
    description: 'Script provided by app to deploy it'
    required: true

runs:
  using: "composite"
  steps:
    - name: Prepare path
      run: eval $(ssh-agent -s) && ssh-add <(echo "${{ inputs.ssh-private-key }}") && ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p "22" ${{ inputs.ssh-user }}@${{ inputs.ssh-host }} "mkdir -p ${{ inputs.destination-path }} && exit" && echo "Destination path ready"
      shell: bash

    - name: Copy files
      run: eval $(ssh-agent -s) && ssh-add <(echo "${{ inputs.ssh-private-key }}") && scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -P "22" -r ${{ inputs.origin-path }}/* ${{ inputs.ssh-user }}@${{ inputs.ssh-host }}:${{ inputs.destination-path }} && echo "Copied files"
      shell: bash

    - name: Execution permission to custom script
      run: eval $(ssh-agent -s) && ssh-add <(echo "${{ inputs.ssh-private-key }}") && ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p "22" ${{ inputs.ssh-user }}@${{ inputs.ssh-host }} "chmod +x ${{ inputs.destination-path }}/${{ inputs.deploy-script }} && exit" && echo "Deploy script found"
      shell: bash

    - name: Execute deploy script
      run: eval $(ssh-agent -s) && ssh-add <(echo "${{ inputs.ssh-private-key }}") && ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p "22" ${{ inputs.ssh-user }}@${{ inputs.ssh-host }} "cd ${{ inputs.destination-path }} && ./${{ inputs.deploy-script }} ${{ inputs.image-version }} ${{ inputs.environment }} && exit" && echo "Application deployed with script"
      shell: bash
